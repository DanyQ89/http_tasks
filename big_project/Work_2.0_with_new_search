import sys
from functools import partial

import PyQt5.uic
import requests
from PyQt5.Qt import QMainWindow, QApplication, QPixmap, QButtonGroup


def get_img(name_func, spn_func, map_func, coord_1_func, coord_2_func, metki_func, take_func, need_postal_code_func,
            move_func=False):
    url = 'http://geocode-maps.yandex.ru/1.x/'
    api_key = '40d1649f-0493-4b70-98ba-98533de7710b'
    params = {
        'apikey': api_key,
        'geocode': name_func,
        'format': 'json'
    }
    res = requests.get(url, params=params).json()

    need = \
        res['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['metaDataProperty']['GeocoderMetaData'][
            'Address']
    full_address_func = need['formatted']

    if need_postal_code_func:
        try:
            post_index_func = need['postal_code']
        except Exception:
            post_index_func = 'Отсутствует'
    else:
        post_index_func = 'Отсутствует'

    if not move_func:
        coord_1, coord_2 = [float(i) for i in
                            res['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point'][
                                'pos'].split()]
    else:
        coord_1, coord_2 = coord_1_func, coord_2_func
    if take_func:
        m = f'{coord_1},{coord_2}'
        if m not in metki_func:
            metki_func.append(m)

    url_map = 'http://static-maps.yandex.ru/1.x/'
    params_map = {
        'l': map_func,
        'll': f'{coord_1},{coord_2}',
        'spn': f'{spn_func},{spn_func}',
        'pt': '~'.join(metki_func),
        'size': f'391,391'
    }
    img = requests.get(url_map, params=params_map).content
    #
    with open('img.txt', 'wb') as file:
        file.write(img)
    return coord_1, coord_2, metki_func, full_address_func, post_index_func


def is_address_good(address):
    if not address:
        return False
    try:
        url = 'http://geocode-maps.yandex.ru/1.x/'
        api_key = '40d1649f-0493-4b70-98ba-98533de7710b'
        params = {
            'apikey': api_key,
            'geocode': address,
            'format': 'json'
        }
        res = requests.get(url, params=params).json()
        if res['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']['Point']['pos']:
            return True
        return False

    except Exception:
        return False


class Map(QMainWindow):
    def __init__(self):
        super().__init__()

        PyQt5.uic.loadUi('map_ui.ui', self)
        self.spn = 0.05
        self.address = 'Москва, Красная Площадь 3'
        self.coord_1 = None
        self.coord_2 = None
        self.map = 'map'
        self.radio_group_buttons = QButtonGroup(self.radio_group)
        self.metka_now = ''
        self.metki_all = []
        self.full_address = ''
        self.post_index = ''
        for i in [self.radio_hybrid, self.radio_map, self.radio_sputnik]:
            self.radio_group_buttons.addButton(i)

        self.initUI()

    def show_map(self, take, move=False):
        map_text = self.radio_group_buttons.checkedButton().text()
        need_postal_code = self.checkBox_post.isChecked()
        if not take:
            if self.metki_all:
                self.metki_all.pop()
        self.spn = float(self.line_spn.text())
        if not move:
            try:
                smth = 'Сша Гарвард'
                if not self.address_text.toPlainText().isdigit():
                    self.address = self.address_text.toPlainText()
            except (ValueError, TypeError):
                pass

        if map_text == '':
            self.map = 'map'
        # elif map_text == 'гибрид':
        #     self.map = 'hybrid'
        # else:
        #     self.map = 'satellite'
        else:
            self.map = 'map'
        self.coord_1, self.coord_2, self.metki_all, self.full_address, self.post_index = get_img(self.address, self.spn,
                                                                                                 self.map, self.coord_1,
                                                                                                 self.coord_2,
                                                                                                 self.metki_all,
                                                                                                 take, need_postal_code,
                                                                                                 move)
        self.address = self.full_address
        self.label_for_map.setPixmap(QPixmap('img.txt'))

    def keyPressEvent(self, e):
        arr = [16777238, 16777239, 16777235, 16777237, 'right_button', 'left_button']
        if e.key() in arr:
            num = self.spn + 0
            if e.key() == 16777238:  # spn up
                if self.spn < 0.9:
                    self.spn += 0.025
            elif e.key() == 16777239:  # spn down
                if self.spn > 0.00001:
                    self.spn -= 0.025
            elif e.key() == 16777235:  # button up
                if self.coord_2 + num / 2 <= 90.0:
                    self.coord_2 += num / 2
            elif e.key() == 16777237:  # button down
                if self.coord_2 - num / 2 >= -90.0:
                    self.coord_2 -= num / 2
            elif e.key() == 'right_button':
                if self.coord_1 + num / 2 <= 180.0:
                    self.coord_1 += num / 2
            elif e.key() == 'left_button':
                if self.coord_1 - num / 2 >= -180.0:
                    self.coord_1 -= num / 2

            self.show_map(take=True, move=True)

    def run_display(self):
        self.textEdit_for_address.setPlainText(f'Полный адрес: {self.full_address}\nПочтовый индекс: {self.post_index}')

    def test_func(self):
        text = self.address_text.toPlainText()
        if len(text) > 5:
            if is_address_good(text):
                self.address = text
                self.show_map(True, False)
                self.run_display()

    def initUI(self):
        self.line_spn.setText(str(self.spn))
        self.address_text.setPlainText(self.address)
        self.label_for_map.setText('')
        self.radio_map.setChecked(True)
        self.checkBox_post.setChecked(True)
        self.main_button.clicked.connect(partial(self.show_map, True, False))
        self.main_button.clicked.connect(self.run_display)
        self.end_button.clicked.connect(partial(self.show_map, False, False))
        self.address_text.textChanged.connect(self.test_func)


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = Map()
    ex.show()
    sys.exit(app.exec())
